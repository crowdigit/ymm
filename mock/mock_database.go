// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/crowdigit/ymm/db (interfaces: Database)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// StoreMetadata mocks base method.
func (m *MockDatabase) StoreMetadata(arg0 string, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreMetadata", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreMetadata indicates an expected call of StoreMetadata.
func (mr *MockDatabaseMockRecorder) StoreMetadata(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreMetadata", reflect.TypeOf((*MockDatabase)(nil).StoreMetadata), arg0, arg1)
}
