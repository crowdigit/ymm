// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/crowdigit/ymm/ydl (interfaces: CommandProvider)

// Package mock is a generated GoMock package.
package mock

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCommandProvider is a mock of CommandProvider interface.
type MockCommandProvider struct {
	ctrl     *gomock.Controller
	recorder *MockCommandProviderMockRecorder
}

// MockCommandProviderMockRecorder is the mock recorder for MockCommandProvider.
type MockCommandProviderMockRecorder struct {
	mock *MockCommandProvider
}

// NewMockCommandProvider creates a new mock instance.
func NewMockCommandProvider(ctrl *gomock.Controller) *MockCommandProvider {
	mock := &MockCommandProvider{ctrl: ctrl}
	mock.recorder = &MockCommandProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandProvider) EXPECT() *MockCommandProviderMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockCommandProvider) Start(arg0 string, arg1 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Start", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockCommandProviderMockRecorder) Start(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockCommandProvider)(nil).Start), varargs...)
}

// StderrPipe mocks base method.
func (m *MockCommandProvider) StderrPipe() (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StderrPipe")
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StderrPipe indicates an expected call of StderrPipe.
func (mr *MockCommandProviderMockRecorder) StderrPipe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StderrPipe", reflect.TypeOf((*MockCommandProvider)(nil).StderrPipe))
}

// StdoutPipe mocks base method.
func (m *MockCommandProvider) StdoutPipe() (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StdoutPipe")
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StdoutPipe indicates an expected call of StdoutPipe.
func (mr *MockCommandProviderMockRecorder) StdoutPipe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StdoutPipe", reflect.TypeOf((*MockCommandProvider)(nil).StdoutPipe))
}

// Wait mocks base method.
func (m *MockCommandProvider) Wait() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Wait indicates an expected call of Wait.
func (mr *MockCommandProviderMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockCommandProvider)(nil).Wait))
}
